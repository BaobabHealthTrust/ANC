<script type="text/javascript" language="javascript">
  <!--
  tt_cancel_show = "/patients/show/<%= @patient.id %>";
  tt_cancel_destination = "/patients/show/<%= @patient.id %>";
</script>
<style type="text/css">
  #summary {
    padding:10px;
    font-size:1.8em;
  }
  #charts {
    position: absolute;
  }
  .title {
    text-decoration:underline;
    margin-right:10px;
  }
  .lowWeightForHeight{color:black;background:red;}
  .medWeightForHeight {color:black;background:yellow;}
  .lowBMI {color:black;background:red;}
  .lowWeightForAge {color:black;background:red;}
  .medWeightForAge {color:black;background:yellow;}
  .goodWeightForAge {color:black;}
  .lowHeightForAge {color:black;background:red;}
  .medHeightForAge {color:black;background:yellow;}
  .goodHeightForAge {color:black;}

  #tt_page_summary_ .inputFrameClass { height:84%; }
</style>

<script src="/javascripts/jquery-1.3.2.min.js" type="text/javascript"></script>
<script language="javascript" type="text/javascript" src="/javascripts/jquery.js"></script>
<script language="javascript" type="text/javascript" src="/javascripts/jquery.flot.js"></script>
<script language="javascript">
  jQuery.noConflict();
 
  var currentBmi;
  var currentWeight;
  var currentHeight;
  var currentHeightPercentile;
  var currentWeightPercentile;
  var displayText;
  var medianWeightHeight;
  var parsedConceptName;
  var conceptHash;
  var timedEvent1;
  var timedEvent2;

  function $(e) {
    return document.getElementById(e);
  }
 
  function growthIndicators(){
    //These values pulled from the tt_onLoad bit in the third form...
    try{
      currentHeight = document.getElementById('height').value;
    }catch(e){
<%if !@anc_patient.current_height.blank?%>
        currentHeight = <%= @anc_patient.current_height %>
<%end%>
    }
    currentWeight = document.getElementById('weight').value;
    medianWeightHeight = [<%= WeightHeightForAge.median_weight_height(@anc_patient.age, @anc_patient.gender).join(',') rescue nil -%>];
    currentWeightPercentile = (currentWeight/(medianWeightHeight[0])*100).toFixed(0);
    currentHeightPercentile = (currentHeight/(medianWeightHeight[1])*100).toFixed(0);
    if (('<%= @anc_patient.age %>') > 14) {
      showBMI();
    } else {
      showWeightHeightForAge();
      showWeightForHeight();
    }
    document.getElementById('inputFrame'+tstCurrentPage).innerHTML = '<div id="summary">' + displayText + '</div><div id="charts" style="height:185px;margin:2px 6px 6px;padding:2px;width:380px;"></div>' ;
    jQuery('#charts').empty().load('/patients/graphs/<%= @patient.id -%>?data=weight&currentWeight=' + currentWeight);

  }
        
  function showWeightHeightForAge(){
    document.getElementById('weight_for_age').value = currentWeightPercentile;
    document.getElementById('height_for_age').value = currentHeightPercentile;
   
    displayText = "<div><span class='title'>Weight for age:</span>";
    if (currentWeightPercentile >= 80){
      displayText += "<span class='goodWeightForAge'>" + currentWeightPercentile + "%</span><br>";
    } else if (currentWeightPercentile >= 75) {
      displayText += "<span class='medWeightForAge'>" + currentWeightPercentile + "%</span>" + " <span class='recommendation'> Moderate wasting </span><br>";
    } else {
      displayText += "<span class='lowWeightForAge'>" + currentWeightPercentile + "%</span>" + " <span class='recommendation'> Severe wasting</span><br>";
    }
    displayText += "</div>";
     
    displayText += "<div><span class='title'>Height for age:</span>";
    if (currentHeightPercentile >= 80){
      displayText += "<span class='goodHeightForAge'>" + currentHeightPercentile + "%</span><br>";
    } else if (currentHeightPercentile >= 75) {
      displayText += "<span class='medHeightForAge'>" + currentHeightPercentile + "%</span>" + " <span class='recommendation'> Moderate stunted growth </span><br>";
    } else {
      displayText += "<span class='lowHeightForAge'>" + currentHeightPercentile + "%</span>" + " <span class='recommendation'> Severe stunted growth </span><br>";
    }
    displayText += "</div>";
 
  }
 
  function showWeightForHeight() {
    var currentHeightRounded = (currentHeight % Math.floor(currentHeight) < 0.5 ? 0 : 0.5) + Math.floor(currentHeight);
    var weightForHeights = null<%#= WeightForHeight.patient_weight_for_height_values.to_json -%>;
    var medianWeightHeight = weightForHeights[currentHeightRounded.toFixed(1)];
    var weightForHeightPercentile = (currentWeight/(medianWeightHeight)*100).toFixed(0);

    document.getElementById('weight_for_height').value = weightForHeightPercentile;
 
    displayText += "<div><span class='title'>Weight for height:</span>";
 
    if (weightForHeightPercentile >= 80) {
      displayText += "<span class='goodWeightForHeight'>" + weightForHeightPercentile + "%</span><br>";
    } else if (weightForHeightPercentile >= 75) {
      displayText += "<span class='medWeightForHeight'>" + weightForHeightPercentile + "%</span>" + " <span class='recommendation'> Moderate wasting</span><br>";
    } else {
      displayText += "<span class='lowWeightForHeight'>" + weightForHeightPercentile + "%</span> <br/><span class='recommendation'> Severe wasting</span><br>";
    }
    displayText += "</div>";
  }
 
  function showBMI() {
    currentBmi = (currentWeight/(currentHeight*currentHeight)*10000).toFixed(1);

    document.getElementById('bmi').value = currentBmi;

    displayText = "<div style='padding: 10px;'><span class='title'>BMI:</span>";
    if (currentBmi > 40.0) {
      displayText += "<span class=''>" + currentBmi + "</span>" +
        "<br/><br/><span>Obesity Class III</span>";
    } else if (currentBmi >= 35.0 && currentBmi <= 39.9) {
      displayText += "<span class=''>" + currentBmi + "</span>" +
        "<br/><br/><span>Obesity Class II</span>";
    } else if (currentBmi >= 30.0 && currentBmi <= 34.9) {
      displayText += "<span class=''>" + currentBmi + "</span>" +
        "<br/><br/><span>Obesity Class I</span>";
    } else if (currentBmi >= 25.0 && currentBmi <= 29.9) {
      displayText += "<span class=''>" + currentBmi + "</span>" +
        "<br/><br/><span>Pre-obesity</span>";
    } else if (currentBmi > 18.5 && currentBmi <= 24.9) {
      displayText += "<span class=''>" + currentBmi + "</span>" +
        "<br/><br/><span> Normal weight</span>";
    } else if (currentBmi > 17.0) {
      displayText += "<span class='lowBMI'>" + currentBmi + "</span>" +
        "<br/><br/><span class='recommendation'> Eligible for counseling</span>";
    } else {
      displayText += "<span class='lowBMI'>" + currentBmi +
        "</span><br/><br/><span class='recommendation'>Eligible for therapeutic feeding</span>";
    }
    displayText += "</div>";
  }
 
</script>
<script>
  var timedEvent;
  var alreadyNoted = false;

  function calculateBP(pos){
    var bp;

    if(!$('bp')){
      var div = document.createElement("div");
      div.id = "bp";
      div.style.height = "13%";
      div.className = "statusLabel";

      $("inputFrame" + tstCurrentPage).appendChild(div);
    }

    if(pos == 1){
      alreadyNoted = false;
      bp = ($("touchscreenInput" + tstCurrentPage).value.trim().length > 0 ? $("touchscreenInput" +
        tstCurrentPage).value.trim() : "?") +
        "/" + ($("diastolic_blood_pressure").value.trim().length > 0 ? $("diastolic_blood_pressure").value.trim() : "?");
    } else if(pos == 2){
      bp = ($("systolic_blood_pressure").value.trim().length > 0 ? $("systolic_blood_pressure").value.trim() : "?") +
        "/" + ($("touchscreenInput" + tstCurrentPage).value.trim().length > 0 ? $("touchscreenInput" +
        tstCurrentPage).value.trim() : "?");
      
      if(parseInt(__$("touchscreenInput" + tstCurrentPage).value) > 90 && alreadyNoted == false){ 
        showMessage('Client is at risk of pre-eclampsia. Please refer her for Urine Protein test.',false,false); 
        alreadyNoted = true;
      } else if(parseInt(__$("touchscreenInput" + tstCurrentPage).value) <= 90){
        alreadyNoted = false;
      }
      
    }

    $("bp").innerHTML = "Blood Pressure: <i style='font-size: 1.2em; float: right;'>" + bp + "</i>";

    timedEvent = setTimeout('calculateBP(' + pos + ')', 500);
  }

  function readableMessage(){

    var conceptName = conceptHash[tstCurrentPage]
    conceptName = (parsedConceptName && parsedConceptName.length > 1) ? parsedConceptName : conceptName;
       
    try{
      conceptName = conceptName.charAt(0).toUpperCase() + conceptName.slice(1).toLowerCase();
      if(__$("messageBar") && !__$("messageBar").innerHTML.match(conceptName)){
        __$("messageBar").innerHTML = __$("messageBar").innerHTML.replace("Value", conceptName + " Value").replace("value", conceptName + " value").replace("a " + conceptName + " value", conceptName + " value")
      }
    }catch(ex){}

    setTimeout(function(){ readableMessage()}, 50);
  }

  function buildConceptsHash(){
    var count = 0;
    var inputArr = document.getElementsByTagName("input")
    conceptHash = {};
    for (var i = 0; i < inputArr.length; i ++){
      if (inputArr[i].name && inputArr[i].name.match("concept_name") && inputArr[i].name.match("observations")){
        conceptHash[count] = inputArr[i].value;
        count ++;
      }
    }
  }

  function transformMessages(){
    buildConceptsHash();
    setTimeout(function(){ readableMessage()}, 50);
  }

  function bpAlerts(type){
    //case of systolic blood pressure type = 1; case dystolic blood pressure type = 2
    //var val1 = ($("diastolic_blood_pressure") && $("diastolic_blood_pressure").value != undefined )? $("diastolic_blood_pressure").value : -1;
    //var val2 = ($("systolic_blood_pressure") && $("systolic_blood_pressure").value != undefined )? $("systolic_blood_pressure").value : -1;
    //var val = (type == 1) ? val1 : val2;
    var val = $("touchscreenInput" + tstCurrentPage).value
    var complication = "";
    
    if (val > 0){
      // check for complications
      var val = parseInt(val);      
      if (type == 1){
        complication = (val >= 120 && val <= 139) ? "Prehypertension" : ((val >= 140 && val <= 159 ) ? "Hypertension Stage 1" : ((val >= 160 && val <= 180) ? "Hypertension Stage 2" : ((val > 180)? "Emergency Care Needed" : "")));
      }else{
        complication = (val >= 80 && val <= 89) ? "Prehypertension" : ((val >= 90 && val <= 99 ) ? "Hypertension Stage 1" : ((val >= 100 && val <= 110) ? "Hypertension Stage 2" : ((val > 110)? "Emergency Care Needed" : "")));
      }
    }
    
    if(!$("bpFlag")){
      try{ $("bp").innerHTML += "<div style='color:red;width:100%;text-align:center;' id='bpFlag'><i style='float=right;align:center;'>" + complication + "</i></div>";}catch(e){};
    }else{
      $("bpFlag").innerHTML = "<div style='color:red;width:100%;text-align:center;' id='bpFlag'><i style='float=right;align:center;'>" + complication + "</i></div>";
    }
  }
  
 
</script>

<form action="/encounters/create/vitals">
  <% default={
    :allowFreeText => 'true',
  } %>

  <%session_date = session[:datetime] || Time.now() %>
  <%= hidden_field_tag "encounter[encounter_type_name]", "VITALS" %>
  <%= hidden_field_tag "encounter[patient_id]", @patient.id %>
  <%= hidden_field_tag "encounter[encounter_datetime]", session_date %>
  <%= hidden_field_tag "encounter[provider_id]", session[:user_id] %>

  <% options = [""]
=begin
if ask_temperature
options << "Temperature"
end

if current_user.activities.include?("Weight and Height") && (params[:weight] || params[:height])
options << "Weight"

if @anc_patient.age <= 18 || @anc_patient.current_height == 0
options << "Height"
end
end

if current_user.activities.include?("BP") && params[:bp]
options << "BP"
end
=end
%>

<%#= select_tag("choice", options_for_select(options),
{
:helpText => 'Select Task(s)', 
:id => "choice",        
:tt_onLoad => "showCategory('Vitals');",
:multiple => true,
:condition => "#{options.length} > 2"
})%>

  <% if ask_temperature %>
    <label for="temperature">Temperature (C)</label>
    <%= text_field_tag "observations[][value_coded_or_text]", nil,
      {:id => "temperature",
      :field_type => 'number',
      :helptext =>"Temperature",
      :allowFreeText => 'true',
      :tt_onLoad => "parsedConceptName = 'Temperature'; if(conceptHash){}else{transformMessages()};",
      :min => 20,
      :max => 45,
      :condition => "if(#{options.length} > 2){getSelected().match(/Temperature/)}else{true}",
      :units => 'Celcius',
      :validationRule => "([0-9]+\\.[0-9])|Unknown$",
      :validationMessage => "You must enter a decimal between 0 and 9 (for example: 36<b>.6</b>)",
      :tt_pageStyleClass => "Numeric NumbersOnlyWithDecimal"} %>
    <%= hidden_field_tag("observations[][concept_name]", "TEMPERATURE (C)") %>
    <%= hidden_field_tag("observations[][patient_id]", @patient.id) %>
    <%= hidden_field_tag("observations[][obs_datetime]", session_date) %>
  <% end %>

  <% if current_user.activities.include?("Weight and Height") %>
    <% if params[:weight] %>
      <label for='weight'>Weight (KG)</label>
      <%= text_field_tag "observations[][value_coded_or_text]", nil,
        {:id => "weight",
        :field_type => 'number',
        :min => 40, # number_with_precision(@patient.min_weight, :precision => 1),
        :max => 200, # number_with_precision(@patient.max_weight, :precision => 1),
        :absoluteMin => 40,
        :absoluteMax => 200,
        :condition => "if(#{options.length} > 2){getSelected().match(/Weight/)}else{true}",
        :tt_onLoad => "showCategory('Vitals'); parsedConceptName = 'Weight'; if(conceptHash){}else{transformMessages()};",
        :tt_onUnLoad => "parsedConceptName = ''",
        :units => 'kg',
        :validationRule => "([0-9]+(\\.[0-9]))|Unknown$",
        :validationMessage => "You must enter a valid decimal number",
        :tt_pageStyleClass => "NumbersWithUnknownAndDecimal"} %>
      <%= hidden_field_tag("observations[][concept_name]", "WEIGHT (KG)") %>
      <%= hidden_field_tag("observations[][patient_id]", @patient.id) %>
      <%= hidden_field_tag("observations[][obs_datetime]", session_date) %>

    <% end %>

    <% if params[:height] %>

      <% if @anc_patient.age > 18 and not @anc_patient.current_height == 0 %>

        <%= hidden_field_tag "observations[][value_coded_or_text]",@anc_patient.current_height %>
        <%= hidden_field_tag("observations[][concept_name]", "HEIGHT (CM)") %>
        <%= hidden_field_tag("observations[][patient_id]", @patient.id) %>
        <%= hidden_field_tag("observations[][obs_datetime]", session_date) %>

      <% else %>

        <label for='height'>Height (CM)</label>
        <%= text_field_tag "observations[][value_coded_or_text]", nil,
          {:id => "height",
          :field_type => 'number',
          :min => number_with_precision(@anc_patient.min_height, :precision => 1),
          :max => number_with_precision(@anc_patient.max_height, :precision => 1),
          :absoluteMin => 10,
          :absoluteMax => 228,
          :condition => "if(#{options.length} > 2){getSelected().match(/Height/)}else{true}",
          :units => 'cm',
          :tt_onUnLoad => "parsedConceptName = ''",
          :tt_onLoad  => "showCategory('Vitals');  parsedConceptName = 'Height'; if(conceptHash){}else{transformMessages()};",
          :validationRule => "^([0-9]+)|Unknown$",
          :validationMessage => "You must enter numbers only (for example 157)",
          :tt_pageStyleClass => "Numeric NumbersWithUnknown"} %>
        <%= hidden_field_tag("observations[][concept_name]", "HEIGHT (CM)") %>
        <%= hidden_field_tag("observations[][patient_id]", @patient.id) %>
        <%= hidden_field_tag("observations[][obs_datetime]", session_date) %>

      <% end %>

    <% end %>

  <% end %>

  <% if current_user.activities.include?("BP") %>
    <% if params[:bp] %>

      <% options = default.merge({
          :id => "systolic_blood_pressure",
          :helptext => "Systolic Blood Pressure (mm Hg)",
          :field_type => "number",
          :tt_pageStyleClass => "NumbersWithUnknown",
          :tt_onLoad => "timedEvent1 = window.setInterval('bpAlerts(1)', 110); timedEvent = setTimeout('calculateBP(1)', 100); showCategory('Vitals'); parsedConceptName = 'Systolic Blood Pressure'; if(conceptHash){}else{transformMessages()};",
          :tt_onUnLoad => "window.clearInterval(timedEvent1); parsedConceptName = ''; clearTimeout(timedEvent); __$('diastolic_blood_pressure').setAttribute('absoluteMax', __$('systolic_blood_pressure').value)",
          :absoluteMin => 1,
          :min => 110,
          :condition => "if(#{options.length} > 2){getSelected().match(/BP/)}else{true}",
          :max => 140
        }) %>

      <%= text_field_tag("observations[][value_coded_or_text]", nil,options) %>
      <%= hidden_field_tag("observations[][concept_name]",  "SYSTOLIC BLOOD PRESSURE",
        {:id => 'systolic_blood_pressure_concept_name'}) %>
      <%= hidden_field_tag("observations[][patient_id]",    @patient.id) %>
      <%= hidden_field_tag("observations[][obs_datetime]",  session_date) %>

      <% options = default.merge({
          :id => "diastolic_blood_pressure",
          :helptext => "Diastolic Blood Pressure (mm Hg)",
          :field_type => "number",
          :tt_pageStyleClass => "NumbersWithUnknown",
          :tt_onLoad => "timedEvent2 = window.setInterval('bpAlerts(2)', 110); timedEvent = setTimeout('calculateBP(2)', 100); showCategory('Vitals'); parsedConceptName = 'Diastolic Blood Pressure'",
          :tt_onUnLoad => "window.clearInterval(timedEvent2);  clearTimeout(timedEvent); parsedConceptName =''",
          :absoluteMin => 1,
          :min => 60,
          :max => 80,
          :condition => "/*((#{options.length} > 2) ? getSelected().match(/BP/) : true) && */" +
            "__$('systolic_blood_pressure').value.toLowerCase() != 'unknown'"
        }) %>

      <%= text_field_tag("observations[][value_coded_or_text]", nil,options) %>
      <%= hidden_field_tag("observations[][concept_name]",  "DIASTOLIC BLOOD PRESSURE", {:id => 'diastolic_blood_pressure_concept_name'}) %>
      <%= hidden_field_tag("observations[][patient_id]",    @patient.id) %>
      <%= hidden_field_tag("observations[][obs_datetime]",  session_date) %>

    <% end %>

  <% end %>


  <% if current_user.activities.include?("Weight and Height") %>
    <% if params[:height] && params[:weight] %>
      <% if @anc_patient.age > 14 %>

        <%= hidden_field_tag("observations[][value_coded_or_text]", nil, {:id => 'bmi'}) %>
        <%= hidden_field_tag("observations[][concept_name]", "BODY MASS INDEX, MEASURED") %>
        <%= hidden_field_tag("observations[][patient_id]", @patient.id) %>
        <%= hidden_field_tag("observations[][obs_datetime]", session_date) %>

      <% else %>

        <%= hidden_field_tag("observations[][value_coded_or_text]", nil, {:id => 'weight_for_height'}) %>
        <%= hidden_field_tag("observations[][concept_name]", "WT FOR HT") %>
        <%= hidden_field_tag("observations[][patient_id]", @patient.id) %>
        <%= hidden_field_tag("observations[][obs_datetime]", session_date) %>

        <%= hidden_field_tag("observations[][value_coded_or_text]", nil, {:id => 'weight_for_age'}) %>
        <%= hidden_field_tag("observations[][concept_name]", "WT FOR AGE") %>
        <%= hidden_field_tag("observations[][patient_id]", @patient.id) %>
        <%= hidden_field_tag("observations[][obs_datetime]", session_date) %>

        <%= hidden_field_tag("observations[][value_coded_or_text]", nil, {:id => 'height_for_age'}) %>
        <%= hidden_field_tag("observations[][concept_name]", "HT FOR AGE") %>
        <%= hidden_field_tag("observations[][patient_id]", @patient.id) %>
        <%= hidden_field_tag("observations[][obs_datetime]", session_date) %>

      <% end %>

    <% end %>
  <% end %>
  <label for='showSummary'>Summary </label>
  <%= text_field_tag :showSummary, nil,
    {
    :tt_onLoad => "growthIndicators(); showCategory('Vitals');",
    :optional => "true",
    :tt_pageStyleClass => "NoControls",
    :condition => "if(__$('weight')){__$('weight').value.toLowerCase() != 'unknown'}"
  } %>

  <%= submit_tag "Finish" %>
</form>
